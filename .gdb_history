print row->data[0]
c
print row->data[0]
print j
print new
c
print row->data[0]
c
c
step
quit
b 119
file Matrix/BinaryMatrix.h 
r
file main
b *getRow 
r
b 119
c
print row
print row->data
print row->data[0]
c
c
c
c
c
quit
quit
b *swapRows
r
b 434
c
print bitmask
quit
b swapRows
r
b 445
c
print bitmask1
print ~bitmask1
print m->data[r1_array_index] & bitmask1
print m->data[r1_array_index]
print extracted_row1
print extracted_row2
print m
print -1 * bitmask1
print -1 ^ bitmask1
print -1UL ^ bitmask1
quit
b swapRows
r
quit
b swapRows
r
b 443
c
print extracted_row1
print bitmask2
print bitmask1
print -1L ^ bitmask1
print -1UL ^ bitmask1
print -1UL ^ bitmask2
quit
b swapRows 
r
b 462
c
print extracted_row1
quit
b swapRows 
b 462
c
r
b 462
c
print extracted_row2
quit
b 30
r
print tree
print tree->l
print tree->r
print tree->key
print *(tree->key)
print *(int*)(tree->key)
quit
b 30
b addNode
r
c
c
print *(int*)key
print tree->l
print tree->r
print tree->key
quit
r
bt
quit
b SplitSyndrome.189
b SplitSyndrome+189
b SplitSyndrome
r
b 189
c
bt
quit
run
bt
print d1
print v1
print v2
print v1->data
print v2->data
quit
r
bt
b addNode
r
b 146
c
print tmp->key
print res
b 146
c
c
delete breakpoint 1
c
print key
print tmp->key
print res
print (BinMatri*)key
print (BinMatrix*)key
print ((BinMatrix*)key)->rows
print ((BinMatrix*)key)->cols
print ((BinMatrix*)key)->data
print ((BinMatrix*)tmp->key)->data
quit
quit
run
bt
quit
r
bt
print v1
print v2
print v2->data
print z
print *z
quit
file main
b findEqualSize_u_m 
r
b 45
c
print n
print m
print u
print t
print binomialCoeff(n-m,t-u)
print size_r
print size_r*(n-(m-1)-t)/(n-(m-1))
c
print binomialCoeff(n-m,t-u)
print size_r*(n-(m-1)-t)/(n-(m-1))
c
print size_r*(n-(m-1)-t)/(n-(m-1))
c
c
quit
quit
b findEqualSize_u_m 
c
r
print binCoefficients[n][1][1]
print binCoefficients[n][1][2]
print binCoefficients[n][1][3]
print binCoefficients[n][2][3]
quit
r
quit
r
print binCoefficients
print binCoefficients[42][8]
quit
r
print *el
print *er
bt
print e
print *e
call printMatrix(*el)
call printMatrix(*er)
quit
r
bt
print m
print *m
print temp
b VectorList_destroy
quit
b VectorList_destroy
r
VectorList_print(*l)
call VectorList_print(*l)
quit
r
bt
call VectorList_print(m)
call VectorList_print(*m)
r
call VectorList_print(*m)
b *VectorList_destroy
r
call VectorList_print(*l)
call VectorList_print(l)
r
call VectorList_print(l)
r
call VectorList_print(*l)
r
print *l
print **l
quit
r
print temp
print temp->v
print *temp->v
print temp
print *l
print temp->next
print old
print old->v
print *old->v
vmmap
print *(old->v)
r
quit
r
quit
quit
r
quit
r
quit
r
print z
call printMatrix(v1)
call printMatrix(v2)
call printMatrix(z)
print z
r
print z
quit
quit
